/* automatically generated by rust-bindgen 0.70.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const RAND_MAX: u32 = 2147483647;
pub const INT_SYS: u32 = 48;
pub const INT_SYS_PANIC: u32 = 48;
pub const INT_SYS_GETPID: u32 = 49;
pub const INT_SYS_YIELD: u32 = 50;
pub const INT_SYS_PAGE_ALLOC: u32 = 51;
pub const INT_SYS_FORK: u32 = 52;
pub const INT_SYS_EXIT: u32 = 53;
pub const INT_SYS_MAPPING: u32 = 54;
pub const INT_SYS_MEM_TOG: u32 = 56;
pub const INT_SYS_BRK: u32 = 57;
pub const INT_SYS_SBRK: u32 = 58;
pub const CONSOLE_COLUMNS: u32 = 80;
pub const CONSOLE_ROWS: u32 = 25;
pub const PAGEOFFBITS: u32 = 12;
pub const PAGESIZE: u32 = 4096;
pub const PAGEINDEXBITS: u32 = 9;
pub const NPAGETABLEENTRIES: u32 = 512;
pub const PFERR_PRESENT: u32 = 1;
pub const PFERR_WRITE: u32 = 2;
pub const PFERR_USER: u32 = 4;
pub const INT_DIVIDE: u32 = 0;
pub const INT_DEBUG: u32 = 1;
pub const INT_BREAKPOINT: u32 = 3;
pub const INT_OVERFLOW: u32 = 4;
pub const INT_BOUNDS: u32 = 5;
pub const INT_INVALIDOP: u32 = 6;
pub const INT_DOUBLEFAULT: u32 = 8;
pub const INT_INVALIDTSS: u32 = 10;
pub const INT_SEGMENT: u32 = 11;
pub const INT_STACK: u32 = 12;
pub const INT_GPF: u32 = 13;
pub const INT_PAGEFAULT: u32 = 14;
pub const CR0_PE: u32 = 1;
pub const CR0_MP: u32 = 2;
pub const CR0_EM: u32 = 4;
pub const CR0_TS: u32 = 8;
pub const CR0_ET: u32 = 16;
pub const CR0_NE: u32 = 32;
pub const CR0_WP: u32 = 65536;
pub const CR0_AM: u32 = 262144;
pub const CR0_NW: u32 = 536870912;
pub const CR0_CD: u32 = 1073741824;
pub const CR0_PG: u32 = 2147483648;
pub const EFLAGS_CF: u32 = 1;
pub const EFLAGS_PF: u32 = 4;
pub const EFLAGS_AF: u32 = 16;
pub const EFLAGS_ZF: u32 = 64;
pub const EFLAGS_SF: u32 = 128;
pub const EFLAGS_TF: u32 = 256;
pub const EFLAGS_IF: u32 = 512;
pub const EFLAGS_DF: u32 = 1024;
pub const EFLAGS_OF: u32 = 2048;
pub const EFLAGS_IOPL_MASK: u32 = 12288;
pub const EFLAGS_IOPL_0: u32 = 0;
pub const EFLAGS_IOPL_1: u32 = 4096;
pub const EFLAGS_IOPL_2: u32 = 8192;
pub const EFLAGS_IOPL_3: u32 = 12288;
pub const EFLAGS_NT: u32 = 16384;
pub const EFLAGS_RF: u32 = 65536;
pub const EFLAGS_VM: u32 = 131072;
pub const EFLAGS_AC: u32 = 262144;
pub const EFLAGS_VIF: u32 = 524288;
pub const EFLAGS_VIP: u32 = 1048576;
pub const EFLAGS_ID: u32 = 2097152;
pub const X86SEG_S: u64 = 17592186044416;
pub const X86SEG_P: u64 = 140737488355328;
pub const X86SEG_L: u64 = 9007199254740992;
pub const X86SEG_DB: u64 = 18014398509481984;
pub const X86SEG_G: u64 = 36028797018963968;
pub const X86SEG_A: u64 = 1099511627776;
pub const X86SEG_R: u64 = 2199023255552;
pub const X86SEG_W: u64 = 2199023255552;
pub const X86SEG_C: u64 = 4398046511104;
pub const X86SEG_E: u64 = 4398046511104;
pub const X86SEG_X: u64 = 8796093022208;
pub const X86SEG_TSS: u64 = 9895604649984;
pub const X86GATE_CALL: u64 = 13194139533312;
pub const X86GATE_INTERRUPT: u64 = 15393162788864;
pub const X86GATE_TRAP: u64 = 16492674416640;
pub const KEYBOARD_STATUSREG: u32 = 100;
pub const KEYBOARD_STATUS_READY: u32 = 1;
pub const KEYBOARD_DATAREG: u32 = 96;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 1usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type va_list = __builtin_va_list;
pub type off_t = ::std::os::raw::c_long;
pub type pid_t = ::std::os::raw::c_int;
extern "C" {
    pub fn memcpy(
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        s: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_int,
        n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strlen(s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(s: *const ::std::os::raw::c_char, maxlen: usize) -> usize;
}
extern "C" {
    pub fn strcpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        a: *const ::std::os::raw::c_char,
        b: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strchr(
        s: *const ::std::os::raw::c_char,
        c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn snprintf(
        s: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulong,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        s: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulong,
        format: *const ::std::os::raw::c_char,
        val: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn assert_fail(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        msg: *const ::std::os::raw::c_char,
    ) -> !;
}
extern "C" {
    pub fn panic(format: *const ::std::os::raw::c_char, ...) -> !;
}
extern "C" {
    pub static mut console: [u16; 2000usize];
}
extern "C" {
    pub static mut cursorpos: ::std::os::raw::c_int;
}
extern "C" {
    pub fn console_clear();
}
extern "C" {
    pub fn console_printf(
        cpos: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn console_vprintf(
        cpos: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        val: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct printer {
    pub putc: ::std::option::Option<
        unsafe extern "C" fn(
            p: *mut printer,
            c: ::std::os::raw::c_uchar,
            color: ::std::os::raw::c_int,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of printer"][::std::mem::size_of::<printer>() - 8usize];
    ["Alignment of printer"][::std::mem::align_of::<printer>() - 1usize];
    ["Offset of field: printer::putc"][::std::mem::offset_of!(printer, putc) - 0usize];
};
extern "C" {
    pub fn printer_vprintf(
        p: *mut printer,
        color: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        val: *mut __va_list_tag,
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct vamapping {
    pub pn: ::std::os::raw::c_int,
    pub pa: usize,
    pub perm: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vamapping"][::std::mem::size_of::<vamapping>() - 16usize];
    ["Alignment of vamapping"][::std::mem::align_of::<vamapping>() - 1usize];
    ["Offset of field: vamapping::pn"][::std::mem::offset_of!(vamapping, pn) - 0usize];
    ["Offset of field: vamapping::pa"][::std::mem::offset_of!(vamapping, pa) - 4usize];
    ["Offset of field: vamapping::perm"][::std::mem::offset_of!(vamapping, perm) - 12usize];
};
pub type x86_64_pageentry_t = u64;
#[repr(C)]
#[repr(align(4096))]
#[derive(Debug, Copy, Clone)]
pub struct x86_64_pagetable {
    pub entry: [x86_64_pageentry_t; 512usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_64_pagetable"][::std::mem::size_of::<x86_64_pagetable>() - 4096usize];
    ["Alignment of x86_64_pagetable"][::std::mem::align_of::<x86_64_pagetable>() - 4096usize];
    ["Offset of field: x86_64_pagetable::entry"]
        [::std::mem::offset_of!(x86_64_pagetable, entry) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct x86_64_registers {
    pub reg_rax: u64,
    pub reg_rcx: u64,
    pub reg_rdx: u64,
    pub reg_rbx: u64,
    pub reg_rbp: u64,
    pub reg_rsi: u64,
    pub reg_rdi: u64,
    pub reg_r8: u64,
    pub reg_r9: u64,
    pub reg_r10: u64,
    pub reg_r11: u64,
    pub reg_r12: u64,
    pub reg_r13: u64,
    pub reg_r14: u64,
    pub reg_r15: u64,
    pub reg_fs: u64,
    pub reg_gs: u64,
    pub reg_intno: u64,
    pub reg_err: u64,
    pub reg_rip: u64,
    pub reg_cs: u16,
    pub reg_padding2: [u16; 3usize],
    pub reg_rflags: u64,
    pub reg_rsp: u64,
    pub reg_ss: u16,
    pub reg_padding3: [u16; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_64_registers"][::std::mem::size_of::<x86_64_registers>() - 192usize];
    ["Alignment of x86_64_registers"][::std::mem::align_of::<x86_64_registers>() - 1usize];
    ["Offset of field: x86_64_registers::reg_rax"]
        [::std::mem::offset_of!(x86_64_registers, reg_rax) - 0usize];
    ["Offset of field: x86_64_registers::reg_rcx"]
        [::std::mem::offset_of!(x86_64_registers, reg_rcx) - 8usize];
    ["Offset of field: x86_64_registers::reg_rdx"]
        [::std::mem::offset_of!(x86_64_registers, reg_rdx) - 16usize];
    ["Offset of field: x86_64_registers::reg_rbx"]
        [::std::mem::offset_of!(x86_64_registers, reg_rbx) - 24usize];
    ["Offset of field: x86_64_registers::reg_rbp"]
        [::std::mem::offset_of!(x86_64_registers, reg_rbp) - 32usize];
    ["Offset of field: x86_64_registers::reg_rsi"]
        [::std::mem::offset_of!(x86_64_registers, reg_rsi) - 40usize];
    ["Offset of field: x86_64_registers::reg_rdi"]
        [::std::mem::offset_of!(x86_64_registers, reg_rdi) - 48usize];
    ["Offset of field: x86_64_registers::reg_r8"]
        [::std::mem::offset_of!(x86_64_registers, reg_r8) - 56usize];
    ["Offset of field: x86_64_registers::reg_r9"]
        [::std::mem::offset_of!(x86_64_registers, reg_r9) - 64usize];
    ["Offset of field: x86_64_registers::reg_r10"]
        [::std::mem::offset_of!(x86_64_registers, reg_r10) - 72usize];
    ["Offset of field: x86_64_registers::reg_r11"]
        [::std::mem::offset_of!(x86_64_registers, reg_r11) - 80usize];
    ["Offset of field: x86_64_registers::reg_r12"]
        [::std::mem::offset_of!(x86_64_registers, reg_r12) - 88usize];
    ["Offset of field: x86_64_registers::reg_r13"]
        [::std::mem::offset_of!(x86_64_registers, reg_r13) - 96usize];
    ["Offset of field: x86_64_registers::reg_r14"]
        [::std::mem::offset_of!(x86_64_registers, reg_r14) - 104usize];
    ["Offset of field: x86_64_registers::reg_r15"]
        [::std::mem::offset_of!(x86_64_registers, reg_r15) - 112usize];
    ["Offset of field: x86_64_registers::reg_fs"]
        [::std::mem::offset_of!(x86_64_registers, reg_fs) - 120usize];
    ["Offset of field: x86_64_registers::reg_gs"]
        [::std::mem::offset_of!(x86_64_registers, reg_gs) - 128usize];
    ["Offset of field: x86_64_registers::reg_intno"]
        [::std::mem::offset_of!(x86_64_registers, reg_intno) - 136usize];
    ["Offset of field: x86_64_registers::reg_err"]
        [::std::mem::offset_of!(x86_64_registers, reg_err) - 144usize];
    ["Offset of field: x86_64_registers::reg_rip"]
        [::std::mem::offset_of!(x86_64_registers, reg_rip) - 152usize];
    ["Offset of field: x86_64_registers::reg_cs"]
        [::std::mem::offset_of!(x86_64_registers, reg_cs) - 160usize];
    ["Offset of field: x86_64_registers::reg_padding2"]
        [::std::mem::offset_of!(x86_64_registers, reg_padding2) - 162usize];
    ["Offset of field: x86_64_registers::reg_rflags"]
        [::std::mem::offset_of!(x86_64_registers, reg_rflags) - 168usize];
    ["Offset of field: x86_64_registers::reg_rsp"]
        [::std::mem::offset_of!(x86_64_registers, reg_rsp) - 176usize];
    ["Offset of field: x86_64_registers::reg_ss"]
        [::std::mem::offset_of!(x86_64_registers, reg_ss) - 184usize];
    ["Offset of field: x86_64_registers::reg_padding3"]
        [::std::mem::offset_of!(x86_64_registers, reg_padding3) - 186usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct x86_64_pseudodescriptor {
    pub pseudod_limit: u16,
    pub pseudod_base: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_64_pseudodescriptor"][::std::mem::size_of::<x86_64_pseudodescriptor>() - 10usize];
    ["Alignment of x86_64_pseudodescriptor"]
        [::std::mem::align_of::<x86_64_pseudodescriptor>() - 2usize];
    ["Offset of field: x86_64_pseudodescriptor::pseudod_limit"]
        [::std::mem::offset_of!(x86_64_pseudodescriptor, pseudod_limit) - 0usize];
    ["Offset of field: x86_64_pseudodescriptor::pseudod_base"]
        [::std::mem::offset_of!(x86_64_pseudodescriptor, pseudod_base) - 2usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct x86_64_taskstate {
    pub ts_reserved0: u32,
    pub ts_rsp: [u64; 3usize],
    pub ts_ist: [u64; 7usize],
    pub ts_reserved1: u64,
    pub ts_reserved2: u16,
    pub ts_iomap_base: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_64_taskstate"][::std::mem::size_of::<x86_64_taskstate>() - 96usize];
    ["Alignment of x86_64_taskstate"][::std::mem::align_of::<x86_64_taskstate>() - 4usize];
    ["Offset of field: x86_64_taskstate::ts_reserved0"]
        [::std::mem::offset_of!(x86_64_taskstate, ts_reserved0) - 0usize];
    ["Offset of field: x86_64_taskstate::ts_rsp"]
        [::std::mem::offset_of!(x86_64_taskstate, ts_rsp) - 4usize];
    ["Offset of field: x86_64_taskstate::ts_ist"]
        [::std::mem::offset_of!(x86_64_taskstate, ts_ist) - 28usize];
    ["Offset of field: x86_64_taskstate::ts_reserved1"]
        [::std::mem::offset_of!(x86_64_taskstate, ts_reserved1) - 84usize];
    ["Offset of field: x86_64_taskstate::ts_reserved2"]
        [::std::mem::offset_of!(x86_64_taskstate, ts_reserved2) - 92usize];
    ["Offset of field: x86_64_taskstate::ts_iomap_base"]
        [::std::mem::offset_of!(x86_64_taskstate, ts_iomap_base) - 94usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct x86_64_gatedescriptor {
    pub gd_low: u64,
    pub gd_high: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_64_gatedescriptor"][::std::mem::size_of::<x86_64_gatedescriptor>() - 16usize];
    ["Alignment of x86_64_gatedescriptor"]
        [::std::mem::align_of::<x86_64_gatedescriptor>() - 1usize];
    ["Offset of field: x86_64_gatedescriptor::gd_low"]
        [::std::mem::offset_of!(x86_64_gatedescriptor, gd_low) - 0usize];
    ["Offset of field: x86_64_gatedescriptor::gd_high"]
        [::std::mem::offset_of!(x86_64_gatedescriptor, gd_high) - 8usize];
};
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 1usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
