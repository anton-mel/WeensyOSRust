/* automatically generated by rust-bindgen 0.70.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ELF_MAGIC: u32 = 1179403647;
pub const ELF_PTYPE_LOAD: u32 = 1;
pub const ELF_PFLAG_EXEC: u32 = 1;
pub const ELF_PFLAG_WRITE: u32 = 2;
pub const ELF_PFLAG_READ: u32 = 4;
pub const ELF_STYPE_NULL: u32 = 0;
pub const ELF_STYPE_PROGBITS: u32 = 1;
pub const ELF_STYPE_SYMTAB: u32 = 2;
pub const ELF_STYPE_STRTAB: u32 = 3;
pub const ELF_SNAME_UNDEF: u32 = 0;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 1usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct elf_header {
    pub e_magic: u32,
    pub e_elf: [u8; 12usize],
    pub e_type: u16,
    pub e_machine: u16,
    pub e_version: u32,
    pub e_entry: u64,
    pub e_phoff: u64,
    pub e_shoff: u64,
    pub e_flags: u32,
    pub e_ehsize: u16,
    pub e_phentsize: u16,
    pub e_phnum: u16,
    pub e_shentsize: u16,
    pub e_shnum: u16,
    pub e_shstrndx: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of elf_header"][::std::mem::size_of::<elf_header>() - 64usize];
    ["Alignment of elf_header"][::std::mem::align_of::<elf_header>() - 1usize];
    ["Offset of field: elf_header::e_magic"][::std::mem::offset_of!(elf_header, e_magic) - 0usize];
    ["Offset of field: elf_header::e_elf"][::std::mem::offset_of!(elf_header, e_elf) - 4usize];
    ["Offset of field: elf_header::e_type"][::std::mem::offset_of!(elf_header, e_type) - 16usize];
    ["Offset of field: elf_header::e_machine"]
        [::std::mem::offset_of!(elf_header, e_machine) - 18usize];
    ["Offset of field: elf_header::e_version"]
        [::std::mem::offset_of!(elf_header, e_version) - 20usize];
    ["Offset of field: elf_header::e_entry"][::std::mem::offset_of!(elf_header, e_entry) - 24usize];
    ["Offset of field: elf_header::e_phoff"][::std::mem::offset_of!(elf_header, e_phoff) - 32usize];
    ["Offset of field: elf_header::e_shoff"][::std::mem::offset_of!(elf_header, e_shoff) - 40usize];
    ["Offset of field: elf_header::e_flags"][::std::mem::offset_of!(elf_header, e_flags) - 48usize];
    ["Offset of field: elf_header::e_ehsize"]
        [::std::mem::offset_of!(elf_header, e_ehsize) - 52usize];
    ["Offset of field: elf_header::e_phentsize"]
        [::std::mem::offset_of!(elf_header, e_phentsize) - 54usize];
    ["Offset of field: elf_header::e_phnum"][::std::mem::offset_of!(elf_header, e_phnum) - 56usize];
    ["Offset of field: elf_header::e_shentsize"]
        [::std::mem::offset_of!(elf_header, e_shentsize) - 58usize];
    ["Offset of field: elf_header::e_shnum"][::std::mem::offset_of!(elf_header, e_shnum) - 60usize];
    ["Offset of field: elf_header::e_shstrndx"]
        [::std::mem::offset_of!(elf_header, e_shstrndx) - 62usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct elf_program {
    pub p_type: u32,
    pub p_flags: u32,
    pub p_offset: u64,
    pub p_va: u64,
    pub p_pa: u64,
    pub p_filesz: u64,
    pub p_memsz: u64,
    pub p_align: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of elf_program"][::std::mem::size_of::<elf_program>() - 56usize];
    ["Alignment of elf_program"][::std::mem::align_of::<elf_program>() - 1usize];
    ["Offset of field: elf_program::p_type"][::std::mem::offset_of!(elf_program, p_type) - 0usize];
    ["Offset of field: elf_program::p_flags"]
        [::std::mem::offset_of!(elf_program, p_flags) - 4usize];
    ["Offset of field: elf_program::p_offset"]
        [::std::mem::offset_of!(elf_program, p_offset) - 8usize];
    ["Offset of field: elf_program::p_va"][::std::mem::offset_of!(elf_program, p_va) - 16usize];
    ["Offset of field: elf_program::p_pa"][::std::mem::offset_of!(elf_program, p_pa) - 24usize];
    ["Offset of field: elf_program::p_filesz"]
        [::std::mem::offset_of!(elf_program, p_filesz) - 32usize];
    ["Offset of field: elf_program::p_memsz"]
        [::std::mem::offset_of!(elf_program, p_memsz) - 40usize];
    ["Offset of field: elf_program::p_align"]
        [::std::mem::offset_of!(elf_program, p_align) - 48usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct elf_section {
    pub s_name: u32,
    pub s_type: u32,
    pub s_flags: u64,
    pub s_addr: u64,
    pub s_offset: u64,
    pub s_size: u64,
    pub s_link: u32,
    pub s_info: u32,
    pub s_addralign: u64,
    pub s_entsize: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of elf_section"][::std::mem::size_of::<elf_section>() - 64usize];
    ["Alignment of elf_section"][::std::mem::align_of::<elf_section>() - 1usize];
    ["Offset of field: elf_section::s_name"][::std::mem::offset_of!(elf_section, s_name) - 0usize];
    ["Offset of field: elf_section::s_type"][::std::mem::offset_of!(elf_section, s_type) - 4usize];
    ["Offset of field: elf_section::s_flags"]
        [::std::mem::offset_of!(elf_section, s_flags) - 8usize];
    ["Offset of field: elf_section::s_addr"][::std::mem::offset_of!(elf_section, s_addr) - 16usize];
    ["Offset of field: elf_section::s_offset"]
        [::std::mem::offset_of!(elf_section, s_offset) - 24usize];
    ["Offset of field: elf_section::s_size"][::std::mem::offset_of!(elf_section, s_size) - 32usize];
    ["Offset of field: elf_section::s_link"][::std::mem::offset_of!(elf_section, s_link) - 40usize];
    ["Offset of field: elf_section::s_info"][::std::mem::offset_of!(elf_section, s_info) - 44usize];
    ["Offset of field: elf_section::s_addralign"]
        [::std::mem::offset_of!(elf_section, s_addralign) - 48usize];
    ["Offset of field: elf_section::s_entsize"]
        [::std::mem::offset_of!(elf_section, s_entsize) - 56usize];
};
